def merge(*args):
    """Merge the contents of any number of dicts into a single dict. Later
    dicts override earlier ones when their keys overlap."""
    
    result = {}
    for dict in args:
        result.update(dict)
    return result

class GeneratedDict(object):
    """
    A dictionary containing some keys whose values are generated by calling
    functions (lazy evaluation) and others from an ordinary dictionary, or
    another dictionary-like object.
    
    Based on:
    http://code.activestate.com/recipes/492226-persistent-lazy-caching-dictionary/
    """
    
    def __init__(self, generators, statics):
        self._generators = generators
        self._statics = statics 
        
    def __contains__(self, key):
        if key in self._generators:
            return True
        else:
            return self._statics.__contains__(key)
    
    def __getitem__(self, key):
        if key in self._generators:
            return self._generators[key]()
        else:
            return self._statics.__getitem__(key)
        
    def __setitem__(self, key, value):
        if key in self._generators:
            raise AttributeError("Cannot assign to a generated key")
        else:
            return self._statics.__setitem__(key, value)

    def __delitem__(self, key):
        if key in self._generators:
            raise AttributeError("Cannot delete a generated key")
        else:
            return self._statics.__delitem__(key)

    def keys(self):
        keys = set(self._generators.keys())
        keys.update(self._statics.keys())
        return keys
    
